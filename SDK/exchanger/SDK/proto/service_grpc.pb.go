// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: SDK/proto/service.proto

package exchanger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Exchanger_Scan_FullMethodName      = "/exchanger.Exchanger/Scan"
	Exchanger_NewReader_FullMethodName = "/exchanger.Exchanger/NewReader"
)

// ExchangerClient is the client API for Exchanger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangerClient interface {
	Scan(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ScanMessage, ScanMessage], error)
	NewReader(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReaderMessage, ReaderMessage], error)
}

type exchangerClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangerClient(cc grpc.ClientConnInterface) ExchangerClient {
	return &exchangerClient{cc}
}

func (c *exchangerClient) Scan(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ScanMessage, ScanMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Exchanger_ServiceDesc.Streams[0], Exchanger_Scan_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScanMessage, ScanMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Exchanger_ScanClient = grpc.BidiStreamingClient[ScanMessage, ScanMessage]

func (c *exchangerClient) NewReader(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReaderMessage, ReaderMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Exchanger_ServiceDesc.Streams[1], Exchanger_NewReader_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReaderMessage, ReaderMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Exchanger_NewReaderClient = grpc.BidiStreamingClient[ReaderMessage, ReaderMessage]

// ExchangerServer is the server API for Exchanger service.
// All implementations must embed UnimplementedExchangerServer
// for forward compatibility.
type ExchangerServer interface {
	Scan(grpc.BidiStreamingServer[ScanMessage, ScanMessage]) error
	NewReader(grpc.BidiStreamingServer[ReaderMessage, ReaderMessage]) error
	mustEmbedUnimplementedExchangerServer()
}

// UnimplementedExchangerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExchangerServer struct{}

func (UnimplementedExchangerServer) Scan(grpc.BidiStreamingServer[ScanMessage, ScanMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedExchangerServer) NewReader(grpc.BidiStreamingServer[ReaderMessage, ReaderMessage]) error {
	return status.Errorf(codes.Unimplemented, "method NewReader not implemented")
}
func (UnimplementedExchangerServer) mustEmbedUnimplementedExchangerServer() {}
func (UnimplementedExchangerServer) testEmbeddedByValue()                   {}

// UnsafeExchangerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangerServer will
// result in compilation errors.
type UnsafeExchangerServer interface {
	mustEmbedUnimplementedExchangerServer()
}

func RegisterExchangerServer(s grpc.ServiceRegistrar, srv ExchangerServer) {
	// If the following call pancis, it indicates UnimplementedExchangerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Exchanger_ServiceDesc, srv)
}

func _Exchanger_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExchangerServer).Scan(&grpc.GenericServerStream[ScanMessage, ScanMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Exchanger_ScanServer = grpc.BidiStreamingServer[ScanMessage, ScanMessage]

func _Exchanger_NewReader_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExchangerServer).NewReader(&grpc.GenericServerStream[ReaderMessage, ReaderMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Exchanger_NewReaderServer = grpc.BidiStreamingServer[ReaderMessage, ReaderMessage]

// Exchanger_ServiceDesc is the grpc.ServiceDesc for Exchanger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exchanger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchanger.Exchanger",
	HandlerType: (*ExchangerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Scan",
			Handler:       _Exchanger_Scan_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewReader",
			Handler:       _Exchanger_NewReader_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "SDK/proto/service.proto",
}
